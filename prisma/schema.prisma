// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  familyId       String?          @default(cuid())
  family         Family?          @relation(fields: [familyId], references: [id])
  PromptFeedback PromptFeedback[]

  @@map("users")
}

model Family {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  inviteToken String?  @unique // Nullable UUID for invite links; revoke by setting to null

  users      User[]
  savedNames SavedName[]

  @@map("families")
}

model SavedName {
  id           String   @id @default(cuid())
  userId       String
  familyId     String
  firstName    String
  lastName     String
  fullName     String
  gender       Gender   @default(FEMALE) // "MALE" or "FEMALE"
  origin       String? // e.g., "Greek", "Latin", "Hebrew"
  popularity   String? // e.g. "Very popular in the 80's"
  feedback     String? // The AI feedback about the name
  middleNames  String[] // Array of suggested middle names
  similarNames String[] // Array of similar names
  savedAt      DateTime @default(now())
  rank         Int      @default(0)

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([firstName, lastName, gender, familyId]) // Prevent duplicates in a family
  // Index familyId faster queries
  @@index([familyId, savedAt])
  @@index([familyId, firstName, lastName])
  @@index([familyId, gender])
  @@index([familyId, rank])
  @@map("saved_names")
}

model NameCache {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  fullName     String
  gender       String   @default("FEMALE") // "boy" or "girl"
  origin       String? // e.g., "Greek", "Latin", "Hebrew"
  popularity   String? // e.g. "Very popular in the 80's"
  feedback     String? // The AI feedback about the name
  middleNames  String[] // Array of suggested middle names
  similarNames String[] // Array of similar names
  createdAt    DateTime @default(now())
  lastAccessed DateTime @default(now())
  accessCount  Int      @default(0)

  // Create a unique constraint for quick lookups
  @@unique([firstName, lastName, gender], name: "firstName_lastName_gender")
  // Index for faster queries and cleanup
  @@index([firstName, lastName])
  @@index([lastName, gender])
  @@index([lastAccessed])
  @@index([accessCount])
  @@map("name_cache")
}

model PromptFeedback {
  id       String @id @default(cuid())
  promptId String // Foreign key to PromptHistory.id

  // Feedback content
  analysisFeedback          String?
  analysisFeedbackQuant     Float?
  originFeedback            String?
  originFeedbackQuant       Float?
  popularityFeedback        String?
  popularityFeedbackQuant   Float?
  similarNamesFeedback      String?
  similarNamesFeedbackQuant Float?
  middleNamesFeedback       String?
  middleNamesFeedbackQuant  Float?

  // Metadata
  userId    String?
  createdAt DateTime @default(now())

  // Relations
  prompt PromptHistory @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user   User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes for efficient querying
  @@index([promptId, createdAt])
  @@index([userId, createdAt])
  @@map("prompt_feedback")
}

// Update your existing PromptHistory model
model PromptHistory {
  id String @id

  // Prompt configuration (what we hash)
  prompt          String // The actual prompt text
  topP            Float  @default(0.9)
  minTokens       Int    @default(0)
  temperature     Float  @default(0.35)
  presencePenalty Float  @default(0.1)

  // Model metadata
  modelName String // e.g., "meta/meta-llama-3.1-405b-instruct"

  // Usage tracking
  usageCount Int @default(1) // How many times this prompt config was used

  // Timestamps
  firstUsed DateTime @default(now())
  lastUsed  DateTime @default(now())

  // Add the relation
  feedback PromptFeedback[]

  // Computed/aggregated fields (updated via triggers or application logic)
  totalFeedbackCount     Int       @default(0)
  averageFeedbackQuality Float?    @default(0)
  lastFeedbackAt         DateTime?

  // Indexes for efficient querying
  @@index([modelName, lastUsed])
  @@index([lastUsed])
  @@index([usageCount])
  @@map("prompt_history")
}

enum Gender {
  MALE
  FEMALE
}
